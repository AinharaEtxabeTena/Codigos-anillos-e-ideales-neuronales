def forma_canonica(n,m,codigo):
    """
    Una función que toma dos números enteros y una lista de vectores como entrada, y devuelve la forma canónica del código.

    Input:
        n (int): Número de neuronas.
        m (int): Número de pàlabras código.
        codigo (list): Lista de vectores que forman el código.

    Return:
        list: Lista de polinomios factorizados que forman la forma canónica del ideal neuronal.
    """
    GF2 = FiniteField(2)

    # Se verifica que todos los datos de entrada son correctos

    if not len(codigo)==m:
        print("El número de palabras código de entrada no coincide con", m)
        return
    for i in range(len(codigo)):
        if not len(codigo[i])==n:
            print("La longitud de alguna de las palabras de entrada no coincide con", n)
            return
    for i in range(m):
        for j in range(n):
            if not (codigo[i][j]==0 or codigo[i][j]==1):
                print("Alguna de las palabras de entrada no es un patron binario.")
                return


    M=MatrixSpace(GF2, m, n)
    R = PolynomialRing(GF2, ['x%s'%i for i in range(1,n+1)])
    C = M(codigo)  # Matriz compuesta por las palabras código en filas
    ci = vector(R, C[0]) # Palabra c1
    CF_JCi = [R.gen(j)-ci[j] for j in range(n)] # PASO 1
    S=[R.gen(j)^2-R.gen(j) for j in range (n)]
    B=R.ideal(S)
    i = 1
    while i < m:
        i = i + 1
        Mi = [f * (R.gen(j)- vector(GF2,C[i-1])[j]) for j in range(n)for f in CF_JCi] # PASO 2
        Mi_prima=[]
        #PASO 3
        for f in Mi:
            if f not in B:
                for g in S:
                    f=f%g
                if f not in Mi_prima:
                    Mi_prima.append(f)             
        Mi_tilde=list(set([f for f in Mi_prima if not any(g.divides(f) for g in Mi_prima if f!=g)])) # PASO 4
        CF_JCi=Mi_tilde # Vuelta al PASO 2
    formacanonica=[CF_JCi[i].factor() for i in range(len(CF_JCi))]
    return print("La forma canónica de ideal neuronal es",formacanonica)

